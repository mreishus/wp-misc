<?php
/**
 * Plugin API: WP_Hook class
 *
 * @package WordPress
 * @subpackage Plugin
 * @since 4.7.0
 */

$GLOBALS['sandbox_hook_count'] = array();
$GLOBALS['sandbox_hook_time']  = array();
$GLOBALS['sandbox_hook_messages'] = array();
$GLOBALS['sandbox_hook_memory'] = array();

// On a test site, we moved from 26070 measurements to 5000 measurements after these bans
$GLOBALS['no_measure_hooks'] = [
	'wp_cache_get_pre',
	// Translation begin
	'gettext',
	'gettext_with_context',
	'ngettext',
	'ngettext_with_context',
	'locale',
	// Translation end
	'plugins_url',
	'option_stylesheet',
	'set_url_scheme',
	'block_type_metadata',
	'block_type_metadata_settings',
	'safe_style_css',
	'safecss_filter_attr_allow_css',
	'register_block_type_args',
	'determine_locale',
	'site_url',
	'wpcom_is_vip',
	'sanitize_title',
	'default_post_metadata',
	'render_block',
	'pre_render_block',
	'render_block_data',
	'home_url',
	'get_attached_file',
	'render_block_context',
	'option_home',
	'keyring_admin_url',
	'wp_register_sidebar_widget',
	'switch_blog',
	'hookpress_get_hooks',
	'includes_url',
	'no_texturize_shortcodes',
	'option_show_on_front',
	'pre_site_option_site_meta_supported',
	'load_textdomain_mofile',
];
$GLOBALS['measure_count'] = 0;

/**
 * Core class used to implement action and filter hook functionality.
 *
 * @since 4.7.0
 *
 * @see Iterator
 * @see ArrayAccess
 */
#[AllowDynamicProperties]
final class WP_Hook implements Iterator, ArrayAccess {

	/**
	 * Hook callbacks.
	 *
	 * @since 4.7.0
	 * @var array
	 */
	public $callbacks = array();

	/**
	 * Priorities list.
	 *
	 * @since 6.4.0
	 * @var array
	 */
	protected $priorities = array();

	/**
	 * The priority keys of actively running iterations of a hook.
	 *
	 * @since 4.7.0
	 * @var array
	 */
	private $iterations = array();

	/**
	 * The current priority of actively running iterations of a hook.
	 *
	 * @since 4.7.0
	 * @var array
	 */
	private $current_priority = array();

	public $hook_name = '';

	/**
	 * Number of levels this hook can be recursively called.
	 *
	 * @since 4.7.0
	 * @var int
	 */
	private $nesting_level = 0;

	/**
	 * Flag for if we're currently doing an action, rather than a filter.
	 *
	 * @since 4.7.0
	 * @var bool
	 */
	private $doing_action = false;

	/**
	 * Adds a callback function to a filter hook.
	 *
	 * @since 4.7.0
	 *
	 * @param string   $hook_name     The name of the filter to add the callback to.
	 * @param callable $callback      The callback to be run when the filter is applied.
	 * @param int      $priority      The order in which the functions associated with a particular filter
	 *                                are executed. Lower numbers correspond with earlier execution,
	 *                                and functions with the same priority are executed in the order
	 *                                in which they were added to the filter.
	 * @param int      $accepted_args The number of arguments the function accepts.
	 */
	public function add_filter( $hook_name, $callback, $priority, $accepted_args ) {
		$this->hook_name = $hook_name;
		$idx = _wp_filter_build_unique_id( $hook_name, $callback, $priority );

		$priority_existed = isset( $this->callbacks[ $priority ] );

		$this->callbacks[ $priority ][ $idx ] = array(
			'function'      => $callback,
			'accepted_args' => (int) $accepted_args,
		);

		// If we're adding a new priority to the list, put them back in sorted order.
		if ( ! $priority_existed && count( $this->callbacks ) > 1 ) {
			ksort( $this->callbacks, SORT_NUMERIC );
		}

		$this->priorities = array_keys( $this->callbacks );

		if ( $this->nesting_level > 0 ) {
			$this->resort_active_iterations( $priority, $priority_existed );
		}
	}

	/**
	 * Handles resetting callback priority keys mid-iteration.
	 *
	 * @since 4.7.0
	 *
	 * @param false|int $new_priority     Optional. The priority of the new filter being added. Default false,
	 *                                    for no priority being added.
	 * @param bool      $priority_existed Optional. Flag for whether the priority already existed before the new
	 *                                    filter was added. Default false.
	 */
	private function resort_active_iterations( $new_priority = false, $priority_existed = false ) {
		$new_priorities = $this->priorities;

		// If there are no remaining hooks, clear out all running iterations.
		if ( ! $new_priorities ) {
			foreach ( $this->iterations as $index => $iteration ) {
				$this->iterations[ $index ] = $new_priorities;
			}

			return;
		}

		$min = min( $new_priorities );

		foreach ( $this->iterations as $index => &$iteration ) {
			$current = current( $iteration );

			// If we're already at the end of this iteration, just leave the array pointer where it is.
			if ( false === $current ) {
				continue;
			}

			$iteration = $new_priorities;

			if ( $current < $min ) {
				array_unshift( $iteration, $current );
				continue;
			}

			while ( current( $iteration ) < $current ) {
				if ( false === next( $iteration ) ) {
					break;
				}
			}

			// If we have a new priority that didn't exist, but ::apply_filters() or ::do_action() thinks it's the current priority...
			if ( $new_priority === $this->current_priority[ $index ] && ! $priority_existed ) {
				/*
				 * ...and the new priority is the same as what $this->iterations thinks is the previous
				 * priority, we need to move back to it.
				 */

				if ( false === current( $iteration ) ) {
					// If we've already moved off the end of the array, go back to the last element.
					$prev = end( $iteration );
				} else {
					// Otherwise, just go back to the previous element.
					$prev = prev( $iteration );
				}

				if ( false === $prev ) {
					// Start of the array. Reset, and go about our day.
					reset( $iteration );
				} elseif ( $new_priority !== $prev ) {
					// Previous wasn't the same. Move forward again.
					next( $iteration );
				}
			}
		}

		unset( $iteration );
	}

	/**
	 * Removes a callback function from a filter hook.
	 *
	 * @since 4.7.0
	 *
	 * @param string                $hook_name The filter hook to which the function to be removed is hooked.
	 * @param callable|string|array $callback  The callback to be removed from running when the filter is applied.
	 *                                         This method can be called unconditionally to speculatively remove
	 *                                         a callback that may or may not exist.
	 * @param int                   $priority  The exact priority used when adding the original filter callback.
	 * @return bool Whether the callback existed before it was removed.
	 */
	public function remove_filter( $hook_name, $callback, $priority ) {
		$function_key = _wp_filter_build_unique_id( $hook_name, $callback, $priority );

		$exists = isset( $this->callbacks[ $priority ][ $function_key ] );

		if ( $exists ) {
			unset( $this->callbacks[ $priority ][ $function_key ] );

			if ( ! $this->callbacks[ $priority ] ) {
				unset( $this->callbacks[ $priority ] );

				$this->priorities = array_keys( $this->callbacks );

				if ( $this->nesting_level > 0 ) {
					$this->resort_active_iterations();
				}
			}
		}

		return $exists;
	}

	/**
	 * Checks if a specific callback has been registered for this hook.
	 *
	 * When using the `$callback` argument, this function may return a non-boolean value
	 * that evaluates to false (e.g. 0), so use the `===` operator for testing the return value.
	 *
	 * @since 4.7.0
	 *
	 * @param string                      $hook_name Optional. The name of the filter hook. Default empty.
	 * @param callable|string|array|false $callback  Optional. The callback to check for.
	 *                                               This method can be called unconditionally to speculatively check
	 *                                               a callback that may or may not exist. Default false.
	 * @return bool|int If `$callback` is omitted, returns boolean for whether the hook has
	 *                  anything registered. When checking a specific function, the priority
	 *                  of that hook is returned, or false if the function is not attached.
	 */
	public function has_filter( $hook_name = '', $callback = false ) {
		if ( false === $callback ) {
			return $this->has_filters();
		}

		$function_key = _wp_filter_build_unique_id( $hook_name, $callback, false );

		if ( ! $function_key ) {
			return false;
		}

		foreach ( $this->callbacks as $priority => $callbacks ) {
			if ( isset( $callbacks[ $function_key ] ) ) {
				return $priority;
			}
		}

		return false;
	}

	/**
	 * Checks if any callbacks have been registered for this hook.
	 *
	 * @since 4.7.0
	 *
	 * @return bool True if callbacks have been registered for the current hook, otherwise false.
	 */
	public function has_filters() {
		foreach ( $this->callbacks as $callbacks ) {
			if ( $callbacks ) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Removes all callbacks from the current filter.
	 *
	 * @since 4.7.0
	 *
	 * @param int|false $priority Optional. The priority number to remove. Default false.
	 */
	public function remove_all_filters( $priority = false ) {
		if ( ! $this->callbacks ) {
			return;
		}

		if ( false === $priority ) {
			$this->callbacks  = array();
			$this->priorities = array();
		} elseif ( isset( $this->callbacks[ $priority ] ) ) {
			unset( $this->callbacks[ $priority ] );
			$this->priorities = array_keys( $this->callbacks );
		}

		if ( $this->nesting_level > 0 ) {
			$this->resort_active_iterations();
		}
	}

	/**
	 * Calls the callback functions that have been added to a filter hook.
	 *
	 * @since 4.7.0
	 *
	 * @param mixed $value The value to filter.
	 * @param array $args  Additional parameters to pass to the callback functions.
	 *                     This array is expected to include $value at index 0.
	 * @return mixed The filtered value after all hooked functions are applied to it.
	 */
	public function apply_filters( $value, $args ) {
		if ( ! $this->callbacks ) {
			return $value;
		}

		$nesting_level = $this->nesting_level++;

		$this->iterations[ $nesting_level ] = $this->priorities;

		$num_args = count( $args );

		$measure_hook = ! empty( $GLOBALS['sandbox_measure_hooks'] );
		if ( $measure_hook && in_array( $this->hook_name, $GLOBALS['no_measure_hooks'] ) ) {
			$measure_hook = false;
		}

		do {
			$this->current_priority[ $nesting_level ] = current( $this->iterations[ $nesting_level ] );

			$priority = $this->current_priority[ $nesting_level ];

			foreach ( $this->callbacks[ $priority ] as $the_ ) {
				if ( ! $this->doing_action ) {
					$args[0] = $value;
				}

				$measure_func = true;
				if ( $measure_hook ) {
					// Figure out name of the hooked function that ran
					$f = '';
					if ( is_string( $the_['function'] ) ) {
						$f = $the_['function'];
						if ( $f === '__return_true' ) {
							$measure_func = false;
						}
					} elseif ( is_array( $the_['function'] ) ) {
						$parts = [];
						foreach ( $the_['function'] as $part ) {
							if ( is_object( $part ) ) {
								$parts[] = get_class( $part );
							} else {
								$parts[] = $part;
							}
						}
						$f = implode( '->', $parts );
					} else {
						try {
							$func = new ReflectionFunction( $the_['function'] );
							$f = $func->getFileName() . ' -> ' . $func->getStartLine() . ' -> ' . $func->getName();
						} catch ( Error $e ) {
							$class = get_class( $the_['function'] );
							$f = $class;
						}
					}

					// Keep global tally of each hooked function
					$sf = trim(preg_replace('/[^A-Za-z0-9-> _\\\\\/\.]+/', '-', $f));
					$sf = $this->hook_name . ' => ' . $sf;
				}

				if ( $measure_hook && $measure_func ) {
					$GLOBALS['measure_count'] += 1;
					$start = microtime( true );
					$memory_start = memory_get_usage( true );
				}

				// Avoid the array_slice() if possible.
				if ( 0 === $the_['accepted_args'] ) {
					$value = call_user_func( $the_['function'] );
				} elseif ( $the_['accepted_args'] >= $num_args ) {
					$value = call_user_func_array( $the_['function'], $args );
				} else {
					$value = call_user_func_array( $the_['function'], array_slice( $args, 0, $the_['accepted_args'] ) );
				}

				if ( $measure_hook && $measure_func ) {
					$end = microtime( true );
					$elap = ( $end - $start ) * 1000;
					$memory_end = memory_get_usage( true );
					$memory_diff = $memory_end - $memory_start;

					if ( ! empty( $GLOBALS['sandbox_hook_memory'][$sf] ) ) {
						$GLOBALS['sandbox_hook_memory'][$sf] += $memory_diff;
					} else {
						$GLOBALS['sandbox_hook_memory'][$sf] = $memory_diff;
					}

					if ( ! empty( $GLOBALS['sandbox_hook_count'][$sf] ) ) {
						$GLOBALS['sandbox_hook_count'][$sf] += 1;
					} else {
						$GLOBALS['sandbox_hook_count'][$sf] = 1;
					}
					if ( ! empty( $GLOBALS['sandbox_hook_time'][$sf] ) ) {
						$GLOBALS['sandbox_hook_time'][$sf] += $elap;
					} else {
						$GLOBALS['sandbox_hook_time'][$sf] = $elap;
					}

					// Log, sometimes
					$do_log = $elap > 10 && empty( $GLOBALS['sandbox_req_hook_logging_suppressed'] );
					$do_log = ($elap > 10 || $memory_diff > 1048576) && empty( $GLOBALS['sandbox_req_hook_logging_suppressed'] );

					// Idea: Always log a specific hook
					// if ( $this->hook_name === 'init' ) { $do_log = true; }

					if ( $do_log ) {
						$elap = round( $elap );
						$link = ( $_SERVER['HTTP_HOST'] ?? '' ) . ( $_SERVER['REQUEST_URI'] ?? '' );
						if ( strpos( $link, '?' ) !== false ) {
								$link = substr( $link, 0, strpos( $link, '?' ) );
						}
						#$message = "{$elap}ms | {$this->hook_name} => $f() | $link";
						$message = "{$elap}ms | {$this->hook_name} :: $f()";
						$memory_diff_mb = round($memory_diff / 1048576, 2);
						$message = "{$elap}ms | {$memory_diff_mb}MB | {$this->hook_name} :: $f()";

						$GLOBALS['sandbox_hook_messages'][] = $message;
					}
				}
			}
		} while ( false !== next( $this->iterations[ $nesting_level ] ) );

		unset( $this->iterations[ $nesting_level ] );
		unset( $this->current_priority[ $nesting_level ] );

		--$this->nesting_level;

		return $value;
	}

	/**
	 * Calls the callback functions that have been added to an action hook.
	 *
	 * @since 4.7.0
	 *
	 * @param array $args Parameters to pass to the callback functions.
	 */
	public function do_action( $args ) {
		$this->doing_action = true;
		$this->apply_filters( '', $args );

		// If there are recursive calls to the current action, we haven't finished it until we get to the last one.
		if ( ! $this->nesting_level ) {
			$this->doing_action = false;
		}
	}

	/**
	 * Processes the functions hooked into the 'all' hook.
	 *
	 * @since 4.7.0
	 *
	 * @param array $args Arguments to pass to the hook callbacks. Passed by reference.
	 */
	public function do_all_hook( &$args ) {
		$nesting_level                      = $this->nesting_level++;
		$this->iterations[ $nesting_level ] = $this->priorities;

		do {
			$priority = current( $this->iterations[ $nesting_level ] );

			foreach ( $this->callbacks[ $priority ] as $the_ ) {
				call_user_func_array( $the_['function'], $args );
			}
		} while ( false !== next( $this->iterations[ $nesting_level ] ) );

		unset( $this->iterations[ $nesting_level ] );
		--$this->nesting_level;
	}

	/**
	 * Return the current priority level of the currently running iteration of the hook.
	 *
	 * @since 4.7.0
	 *
	 * @return int|false If the hook is running, return the current priority level.
	 *                   If it isn't running, return false.
	 */
	public function current_priority() {
		if ( false === current( $this->iterations ) ) {
			return false;
		}

		return current( current( $this->iterations ) );
	}

	/**
	 * Normalizes filters set up before WordPress has initialized to WP_Hook objects.
	 *
	 * The `$filters` parameter should be an array keyed by hook name, with values
	 * containing either:
	 *
	 *  - A `WP_Hook` instance
	 *  - An array of callbacks keyed by their priorities
	 *
	 * Examples:
	 *
	 *     $filters = array(
	 *         'wp_fatal_error_handler_enabled' => array(
	 *             10 => array(
	 *                 array(
	 *                     'accepted_args' => 0,
	 *                     'function'      => function() {
	 *                         return false;
	 *                     },
	 *                 ),
	 *             ),
	 *         ),
	 *     );
	 *
	 * @since 4.7.0
	 *
	 * @param array $filters Filters to normalize. See documentation above for details.
	 * @return WP_Hook[] Array of normalized filters.
	 */
	public static function build_preinitialized_hooks( $filters ) {
		/** @var WP_Hook[] $normalized */
		$normalized = array();

		foreach ( $filters as $hook_name => $callback_groups ) {
			if ( $callback_groups instanceof WP_Hook ) {
				$normalized[ $hook_name ] = $callback_groups;
				continue;
			}

			$hook = new WP_Hook();

			// Loop through callback groups.
			foreach ( $callback_groups as $priority => $callbacks ) {

				// Loop through callbacks.
				foreach ( $callbacks as $cb ) {
					$hook->add_filter( $hook_name, $cb['function'], $priority, $cb['accepted_args'] );
				}
			}

			$normalized[ $hook_name ] = $hook;
		}

		return $normalized;
	}

	/**
	 * Determines whether an offset value exists.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/arrayaccess.offsetexists.php
	 *
	 * @param mixed $offset An offset to check for.
	 * @return bool True if the offset exists, false otherwise.
	 */
	#[ReturnTypeWillChange]
	public function offsetExists( $offset ) {
		return isset( $this->callbacks[ $offset ] );
	}

	/**
	 * Retrieves a value at a specified offset.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/arrayaccess.offsetget.php
	 *
	 * @param mixed $offset The offset to retrieve.
	 * @return mixed If set, the value at the specified offset, null otherwise.
	 */
	#[ReturnTypeWillChange]
	public function offsetGet( $offset ) {
		return isset( $this->callbacks[ $offset ] ) ? $this->callbacks[ $offset ] : null;
	}

	/**
	 * Sets a value at a specified offset.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/arrayaccess.offsetset.php
	 *
	 * @param mixed $offset The offset to assign the value to.
	 * @param mixed $value The value to set.
	 */
	#[ReturnTypeWillChange]
	public function offsetSet( $offset, $value ) {
		if ( is_null( $offset ) ) {
			$this->callbacks[] = $value;
		} else {
			$this->callbacks[ $offset ] = $value;
		}

		$this->priorities = array_keys( $this->callbacks );
	}

	/**
	 * Unsets a specified offset.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/arrayaccess.offsetunset.php
	 *
	 * @param mixed $offset The offset to unset.
	 */
	#[ReturnTypeWillChange]
	public function offsetUnset( $offset ) {
		unset( $this->callbacks[ $offset ] );
		$this->priorities = array_keys( $this->callbacks );
	}

	/**
	 * Returns the current element.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/iterator.current.php
	 *
	 * @return array Of callbacks at current priority.
	 */
	#[ReturnTypeWillChange]
	public function current() {
		return current( $this->callbacks );
	}

	/**
	 * Moves forward to the next element.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/iterator.next.php
	 *
	 * @return array Of callbacks at next priority.
	 */
	#[ReturnTypeWillChange]
	public function next() {
		return next( $this->callbacks );
	}

	/**
	 * Returns the key of the current element.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/iterator.key.php
	 *
	 * @return mixed Returns current priority on success, or NULL on failure
	 */
	#[ReturnTypeWillChange]
	public function key() {
		return key( $this->callbacks );
	}

	/**
	 * Checks if current position is valid.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/iterator.valid.php
	 *
	 * @return bool Whether the current position is valid.
	 */
	#[ReturnTypeWillChange]
	public function valid() {
		return key( $this->callbacks ) !== null;
	}

	/**
	 * Rewinds the Iterator to the first element.
	 *
	 * @since 4.7.0
	 *
	 * @link https://www.php.net/manual/en/iterator.rewind.php
	 */
	#[ReturnTypeWillChange]
	public function rewind() {
		reset( $this->callbacks );
	}
}

function sandbox_get_hook_summary() {
	$count_summary = array();
	$time_summary = array();

	// Sort hooks by count
	arsort( $GLOBALS['sandbox_hook_count'] );

	// Get top 5 by count
	$count_summary = array_slice( $GLOBALS['sandbox_hook_count'], 0, 10, true );

	// Sort hooks by time
	arsort( $GLOBALS['sandbox_hook_time'] );

	// Get top 5 by time
	$time_summary = array_slice( $GLOBALS['sandbox_hook_time'], 0, 10, true );

	$summary = "Hook Performance Summary:\n";
	$summary .= "Top 10 hooks by count:\n";
	foreach ( $count_summary as $hook => $count ) {
		$avg_time = $GLOBALS['sandbox_hook_time'][ $hook ] / $count;
		$summary .= sprintf( "- %s: %d calls, %.2f ms total, %.2f ms avg\n",
							 esc_html( $hook ),
							 $count,
							 $GLOBALS['sandbox_hook_time'][$hook],
							 $avg_time );
	}

	$summary .= "\nTop 10 hooks by total time:\n";
	foreach ( $time_summary as $hook => $time ) {
		$count = $GLOBALS['sandbox_hook_count'][ $hook ];
		$avg_time = $time / $count;
		$summary .= sprintf( "- %s: %.2f ms total, %d calls, %.2f ms avg\n",
							 esc_html( $hook ),
							 $time,
							 $count,
							 $avg_time );
	}

	arsort( $GLOBALS['sandbox_hook_memory'] );
	$memory_summary = array_slice( $GLOBALS['sandbox_hook_memory'], 0, 10, true );
	$summary .= "\nTop 10 hooks by memory usage:\n";
	foreach ( $memory_summary as $hook => $memory ) {
		$count = $GLOBALS['sandbox_hook_count'][ $hook ];
		$avg_memory = $memory / $count;
		$summary .= sprintf( "- %s: %.2f MB total, %d calls, %.2f MB avg\n",
							esc_html( $hook ),
							$memory / 1048576,
							$count,
							$avg_memory / 1048576 );
	}

	return $summary;
}

function sandbox_output_hook_messages() {
	if ( ! empty( $GLOBALS['sandbox_hook_messages'] ) ) {
		echo "<!-- Hook Performance Messages\n";
		foreach ( $GLOBALS['sandbox_hook_messages'] as $message ) {
			echo esc_html( $message ) . "\n";
		}
		echo "\n" . sandbox_get_hook_summary();

		echo '-->';
	}
}

if ( ! empty( $_GET['measure_hooks'] ) && $_GET['measure_hooks'] === 'abcd' ) {
	$GLOBALS['sandbox_measure_hooks'] = true;
	add_action( 'shutdown', 'sandbox_output_hook_messages', 2500 );
	add_action( 'wp_footer', 'sandbox_output_hook_messages', 2500 );
}
